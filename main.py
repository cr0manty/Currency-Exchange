# encoding=utf-8
from flask import request
from telebot import types
from emoji import emojize

from telebot import TeleBot
import os

from config import token
from config import web_hook_url, WEB_DEBUG
from func import CourseList, parse_text
from app import server

bot = TeleBot(token)
course = CourseList()


@bot.message_handler(commands=['start'])
def update_course(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + message.from_user.first_name +
                     '! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω–≤–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é.\n' +
                     '–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –∫–∞–∫ –≤ —ç—Ç–æ–º, —Ç–∞–∫ –∏ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö.\n' +
                     '–ù–æ —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ üëÄ\n' +
                     "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: '—á–∏—Å–ª–æ' '–≤–∞–ª—é—Ç–∞ –∏–∑' '–≤–∞–ª—é—Ç–∞ –≤'")


@bot.inline_handler(func=lambda query: len(query.query) > 8)
def query_text(query):
    try:
        parse_text(query.query)
    except AttributeError as e:
        return
    text = query.query.upper().split()
    try:
        if course.update(text):
            result = types.InlineQueryResultArticle(
                id='0', title="–ö–æ–Ω–≤–µ—Ä—Ç–æ—Ä",
                description=str(course.value),
                input_message_content=types.InputTextMessageContent(
                    message_text=str(course.value)))
        else:
            result = types.InlineQueryResultArticle(
                id='0', title="–ù–µ —Ñ–æ—Ä–º–∞—Ç", description="–§–æ—Ä–º–∞—Ç: '—á–∏—Å–ª–æ' '–≤–∞–ª—é—Ç–∞ –∏–∑' '–≤–∞–ª—é—Ç–∞ –≤'",
                input_message_content=types.InputTextMessageContent(
                    message_text=''))
        bot.answer_inline_query(query.id, [result])
    except Exception as e:
        if WEB_DEBUG:
            result = types.InlineQueryResultArticle(
                id='0', title="–û—à–∏–±–∫–∞", description=e,
                input_message_content=types.InputTextMessageContent(
                    message_text=''))
            bot.answer_inline_query(query.id, [result])


@bot.inline_handler(func=lambda query: len(query.query) < 8)
def empty_query(query):
    try:
        result = types.InlineQueryResultArticle(
            id='1',
            title='–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç',
            description="–§–æ—Ä–º–∞—Ç: '—á–∏—Å–ª–æ' '–≤–∞–ª—é—Ç–∞ –∏–∑' '–≤–∞–ª—é—Ç–∞ –≤'",
            input_message_content=types.InputTextMessageContent(
                message_text=query.query))
        bot.answer_inline_query(query.id, [result])
    except Exception as e:
        if WEB_DEBUG:
            bot.answer_inline_query(query.id, [e])


@bot.message_handler(commands=['know'])
def known_course(message):
    try:
        bot_message = ''
        if not course:
            bot_message = '–ü—Ä–æ—Å—Ç–∏, —è –µ—â–µ –Ω–µ –∑–Ω–∞—é –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã'
        else:
            for i in course:
                bot_message += str(i) + ' '
        bot.send_message(message.chat.id, bot_message)
    except Exception as e:
        if WEB_DEBUG:
            bot.send_message(message.chat.id, message.text)
            bot.send_message(message.chat.id, e)


@bot.message_handler(commands=['add'])
def add_course(message):
    try:
        global course
        new_course = message.text.lower().split()[1]
        if 3 < len(new_course) < 6:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –∫—É—Ä—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω!\n' +
                             '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É!\n' +
                             "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '/add uah'")
        elif new_course in course:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫—É—Ä—Å —É–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å!‚ò∫')
        else:
            if course == new_course:
                course += new_course
                bot.send_message(message.chat.id, '–£—Ä–∞! –¢–µ–ø–µ—Ä—å –º–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–ª—é—Ç–∞!‚ò∫')
            else:
                bot.send_message(message.chat.id, '–û—Ö! –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –≤–∞–ª—é—Ç—É üò∞')
    except Exception as e:
        if WEB_DEBUG:
            bot.send_message(message.chat.id, message.text)
            bot.send_message(message.chat.id, e)
        bot.send_message(message.chat.id, '–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò∞')


@bot.message_handler(content_types=['text'])
def send_text(message):
    try:
        if parse_text(message.text):
            text = message.text.upper().split()
            if course.update(text):
                bot.send_message(message.chat.id, str(course.value))
            else:
                bot.send_message(message.chat.id, '–í—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç –º–Ω–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞'
                                 + emojize(':anxious_face_with_sweat:'))
        elif '–ø—Ä–∏–≤–µ—Ç' in message.text.lower():
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç–∏–∫, ' + message.from_user.first_name
                             + emojize(':winking_face:'))
        elif '–ø–æ–∫–∞' in message.text.lower():
            bot.send_message(message.chat.id, '–ü—Ä–æ—â–∞–π' + emojize(':anxious_face_with_sweat:'))
        else:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª'
                             + emojize(':grinning_face_with_sweat:'))
    except Exception as e:
        if WEB_DEBUG:
            bot.send_message(message.chat.id, message.text)
            bot.send_message(message.chat.id, e)


@server.route('/' + token, methods=['POST'])
def get_message():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode('utf-8'))])
    return '!', 200


# @server.route('/')
# def webhook():
#     bot.remove_webhook()
#     bot.set_webhook(url=web_hook_url + token)
#     return 'Webhook active', 200


if __name__ == '__main__':
    bot.remove_webhook()
    if not WEB_DEBUG:
        bot.polling()
    else:
        bot.set_webhook(url=web_hook_url + token)
        server.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
